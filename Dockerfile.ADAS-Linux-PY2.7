# This Dockerfile is used to build an image containing basic stuff to be used as a Jenkins slave build node.

FROM ubuntu:16.04
MAINTAINER Igor Rabkin <igor.rabkin@xiaoyi.com>


#################################################
#          Set Time Zone Asia/Jerusalem         #
################################################# 

ENV TZ=Asia/Jerusalem
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone


################################################
#     Basic desktop environment                #
################################################

# Locale, language
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales
RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
locale-gen
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8


#################################################
#     Very basic installations                  #
#################################################

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    software-properties-common \
	build-essential \
    curl \
    wget \
	vim \
	git \
    git-flow \
	mercurial \
	tzdata \
	pv \
	zip \
	unzip \
	rsync \
	cifs-utils \
	iputils-ping \
	tree \
    net-tools \
	nano \
	htop \
	sudo \
	nfs-client \
	nfs-common \
	pkg-config && \
	dpkg-reconfigure -f noninteractive tzdata

#########################
#   Installing Cmake    #
#########################

RUN apt-get install -y --no-install-recommends \ 
    openssl \
    libssl-dev
 
ARG version=3.12 
ARG build=1 
RUN cd /usr/local/src \
    && wget https://cmake.org/files/v$version/cmake-$version.$build.tar.gz \
    && tar -xzvf cmake-$version.$build.tar.gz \
    && cd cmake-$version.$build \
    && sed -i 's/cmake_options="-DCMAKE_BOOTSTRAP=1"/cmake_options="-DCMAKE_BOOTSTRAP=1 -DCMAKE_USE_OPENSSL=ON"/' bootstrap  \
    && ./bootstrap \
    && make -j4 \
    &&  make install \
    && cmake --version \
    rm cmake-$version.$build.tar.gz


#################################################
#     Python installations for dev              #
#################################################
	
RUN apt-get update && apt-get install -y --no-install-recommends \ 
    python-dev \
	python-opencv \
	python-setuptools \
	python-pytest
	
##############################################
#    Installing apps for build environment   #
##############################################

RUN dpkg --add-architecture i386 && \
   apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
   protobuf-compiler \
   clang-format \
   zlib1g:i386 \
   libc6:i386 
   libncurses5:i386 \
   libstdc++6:i386 \
   file \
   texinfo \
   cppcheck \
   gcc-multilib \   
   valgrind 
   

##################################
# Install JDK 8 (latest edition) #
##################################

RUN add-apt-repository -y ppa:openjdk-r/ppa &&\
    apt-get -q update && \
    DEBIAN_FRONTEND="noninteractive" apt-get -q install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends openjdk-8-jre-headless &&\
    apt-get -q clean -y && \
	rm -rf /var/lib/apt/lists/* && \
	rm -f /var/cache/apt/*.bin
   
   	
############################################	
# Installing PIP and build environment app #
############################################

RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python /get-pip.py --no-setuptools && \
    rm get-pip.py
	
RUN pip --no-cache-dir install \
    xmltodict \
	numpy==1.14.5 


##############################################################
#                Installing and Configuring SSH              #
##############################################################

RUN apt-get -q update &&\
    DEBIAN_FRONTEND="noninteractive" apt-get -q update -y -o Dpkg::Options::="--force-confnew" --no-install-recommends &&\
    DEBIAN_FRONTEND="noninteractive" apt-get -q install -y -o Dpkg::Options::="--force-confnew" --no-install-recommends openssh-server &&\
    rm -rf /var/lib/apt/lists/* && rm -f /var/cache/apt/*.bin 
	
# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd && \
    # Preventing double MOTD's mesages shown when login using SSH
    sed -i "s/UsePAM yes/UsePAM no/" /etc/ssh/sshd_config && \
    mkdir /var/run/sshd  
	

#################################
# Set user jenkins to the image #
#################################

RUN useradd -m -d /home/jenkins -s /bin/bash jenkins &&\
    echo "jenkins:jenkins" | chpasswd
	
# Add the jenkins user to sudoers
RUN echo "jenkins  ALL=(ALL)  NOPASSWD: ALL" >> etc/sudoers

# Set full permission for jenkins folder
RUN chmod -R 777 /home/jenkins


#########################################
# Add Welcome Message With Instructions #
#########################################

RUN echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/issue && cat /etc/motd' \
	>> /etc/bash.bashrc \
	; echo "\
||||||||||||||||||||||||||||||||||||\n\
|                                  |\n\
| Docker Container Running Ubuntu  |\n\
| Using As Linux Build Environment |\n\
| For ADAS Project                 |\n\
|                                  |\n\
||||||||||||||||||||||||||||||||||||\n\
\n "\
	> /etc/motd

	
#####################
# Standard SSH Port #
#####################

EXPOSE 22


#####################
# Default command   #
#####################

CMD ["/usr/sbin/sshd", "-D"]
RUN ["/bin/bash"]

